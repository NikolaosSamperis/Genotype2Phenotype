# Generate Plot
output$plot <- renderPlotly({
  data <- filtered_data()
  if (nrow(data) == 0) {
    ggplot() +
      geom_text(aes(x = 0.5, y = 0.5, label = "No data available for the selection.")) +
      theme_void()
  } else {
    # Generate unique colors for groups
    group_colors <- data %>%
      distinct(group_name) %>%
      mutate(color = scales::hue_pal()(n_distinct(group_name)))
    
    data <- left_join(data, group_colors, by = "group_name")
    
    data$group_name <- factor(data$group_name, levels = unique(data$group_name))
    
    plot <- ggplot(data, aes(
      x = group_name, 
      y = pvalue, 
      color = group_name, 
      text = paste("Phenotype:", parameter_name, "<br>P-Value:", pvalue, "<br>Group:", group_name)
    )) +
      geom_point(size = 2) +
      geom_hline(yintercept = 0.049, linetype = "dotted", color = "black") +
      scale_color_manual(values = setNames(group_colors$color, group_colors$group_name)) +
      scale_y_continuous(
        trans = custom_y_transform,
        breaks = c(seq(0, 0.05, by = 0.01), seq(0.1, 1, by = 0.1)),
        labels = c(sprintf("%.2f", seq(0, 0.05, by = 0.01)), seq(0.1, 1, by = 0.1))
      ) +
      labs(
        title = "",
        x = "",
        y = "P-Value",
        color = "   Groups\n"
      ) +
      theme_minimal() +
      theme(
        axis.ticks.x = element_blank(),
        axis.text.x = element_blank()
      ) #+ 
    # Add "Not Significant" above the dotted line
    #geom_text(aes(x = 7, y = 0.07, label = "Not Significant"), color = "black", size = 4, hjust = 0) +
    # Add "Significant" below the dotted line
    #geom_text(aes(x = 7, y = 0.04, label = "Significant"), color = "black", size = 4, hjust = 0)
    
    ggplotly(plot, tooltip = "text") %>% event_register("plotly_click")
    #event_register(p, 'plotly_click')
    #p
  }
})

output$click_info <- renderText({
  # Ensure data is available and the plot has been rendered
  data <- filtered_data()
  req(nrow(data) > 0)  # Ensures there's data to plot
  
  # Capture click event
  click <- event_data("plotly_click")
  
  # Default message if no click event
  if (is.null(click)) {
    return("Click on a point to see details.")
  }
  
  # Ensure group_name is treated as a factor
  data$group_name <- factor(data$group_name, levels = unique(data$group_name))
  
  # Reverse the transformation of y to get the original pvalue
  original_pvalue <- custom_y_transform$inverse(click$y)
  
  # Map numeric x-position to group_name
  x_index <- round(click$x)  # Round to get the nearest x-index
  
  if (x_index >= 1 && x_index <= length(levels(data$group_name))) {
    clicked_group <- levels(data$group_name)[x_index]
    
    # Filter for the clicked group and original pvalue
    clicked_point <- data %>%
      filter(
        group_name == clicked_group,
        abs(pvalue - original_pvalue) < 0.01
      )
    
    if (nrow(clicked_point) > 0) {
      # Format the output with line breaks
      paste(
        "Parameter Name:", clicked_point$parameter_name[1],
        "\nP-Value:", sprintf("%.7f", clicked_point$pvalue[1]),
        "\nGene Accession ID:", clicked_point$gene_accession_id[1],
        "\nParameter ID:", clicked_point$parameter_id[1]
      )
    } else {
      "Click on a point to see details."
    }
  } else {
    # Reset message when clicking outside valid group ranges
    "Click on a point to see details."
  }
})