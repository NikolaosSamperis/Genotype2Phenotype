library(shiny)
library(DBI)
library(RMySQL)
library(ggplot2)
library(plotly)
library(dplyr)
library(tidyr)
library(umap)
library(heatmaply)
library(RColorBrewer)
library(reshape2)
library(shinycssloaders)

# Define UI
gene_clustering_ui <- fluidPage(
  titlePanel(
    HTML("<span style='font-family: Arial; font-size: 20px; font-weight: italic;'>Clustering of Gene Symbols on Significance Score</span>")
  ),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("plot_type", "Choose Clustering Type:", 
                  choices = c("--" = "--", "UMAP" = "umap", "Heatmap/Dendrogram" = "heatmap"),
                  selected = "--"),
      numericInput("num_clusters", "Number of Clusters:", value = 5, min = 2, max = 15, step = 1),
      width = 3
    ),
    
    mainPanel(
      conditionalPanel(
        condition = "input.plot_type == 'umap'",
        withSpinner(plotlyOutput("cluster_plot", height = "600px")),
        verbatimTextOutput("click_info")
      ),
      conditionalPanel(
        condition = "input.plot_type == 'heatmap'",
        withSpinner(plotlyOutput("heatmap_plot", height = "600px"))
      ),
      width = 9
    )
  )
)

# Define Server
gene_clustering_server <- function(input, output, session) {
  # Establish a database connection
  con <- dbConnect(
    RMySQL::MySQL(),
    dbname = "dcdm_project",
    host = "localhost",
    user = "barry",
    password = "push12@KCL"
  )
  
  onStop(function() {
    dbDisconnect(con)  # Ensure connection is closed
  })
  
  # Reactive data filtered from the database
  filtered_data <- reactive({
    query <- "SELECT UPPER(gene_symbol) as gene_symbol,
              CONCAT(UCASE(SUBSTRING(parameter_name, 1, 1)), 
              LOWER(SUBSTRING(parameter_name, 2))) AS parameter_name, 
              pvalue,
              CONCAT(UCASE(SUBSTRING(group_name, 1, 1)), 
              LOWER(SUBSTRING(group_name, 2))) AS group_name 
              FROM analysis"
    dbGetQuery(con, query)
  })
  
  # UMAP Data
  umap_data <- reactive({
    req(input$plot_type == "umap")
    
    data <- filtered_data()
    validate(
      need(!is.null(data) && nrow(data) > 0, "No data available for UMAP clustering.")
    )
    
    data <- data %>%
      filter(!is.na(pvalue), pvalue < 0.0001) %>%
      group_by(group_name) %>%
      mutate(group_id = as.integer(factor(group_name))) %>%
      ungroup()
    
    umap_input <- scale(data$pvalue)
    umap_result <- umap(umap_input, n_neighbors = 15, min_dist = 0.1, metric = "euclidean")
    
    num_clusters <- input$num_clusters  # User-defined cluster count
    
    # Apply k-means clustering to UMAP results
    umap_clusters <- kmeans(umap_result$layout, centers = num_clusters)$cluster
    
    data <- data %>%
      mutate(
        umap_x = umap_result$layout[, 1],
        umap_y = umap_result$layout[, 2],
        cluster = factor(umap_clusters)  # Assign clusters
      )
    
    return(data)
  })
  
  # Heatmap Data
  heatmap_data <- reactive({
    req(input$plot_type == "heatmap")
    
    data <- filtered_data()
    validate(
      need(!is.null(data) && nrow(data) > 0, "No data available for heatmap.")
    )
    
    data <- data %>%
      filter(!is.na(pvalue), pvalue < 0.0001) %>%
      group_by(gene_symbol) %>%
      summarise(mean_pvalue = mean(pvalue, na.rm = TRUE)) %>%  
      arrange(mean_pvalue) %>%  
      slice_head(n = 50) %>%  
      select(gene_symbol) %>%
      inner_join(data, by = "gene_symbol") 
    
    # Reshape into a matrix for clustering
    heatmap_matrix <- dcast(data, formula = gene_symbol ~ group_name, value.var = "pvalue", fill = 0)
    
    # Set row names and convert to matrix
    rownames(heatmap_matrix) <- heatmap_matrix[[1]]
    heatmap_matrix <- heatmap_matrix[, -1]
    heatmap_matrix <- as.matrix(heatmap_matrix)
    
    #heatmap_matrix <- scale(heatmap_matrix)
    
    heatmap_matrix <- scale(heatmap_matrix, center = TRUE, scale = TRUE)
    
    # Perform hierarchical clustering
    row_dendrogram <- hclust(dist(heatmap_matrix, method = "euclidean"), method = "complete")
    
    num_clusters <- input$num_clusters  # Get user input for clusters
    clusters <- cutree(row_dendrogram, k = num_clusters)  # Cut tree into k clusters
    
    ordered_rows <- order(clusters)
    heatmap_matrix <- heatmap_matrix[ordered_rows, ]
    
    cluster_colors <- RColorBrewer::brewer.pal(num_clusters, "Set2")  # Generate distinct colors
    row_colors <- cluster_colors[clusters][ordered_rows]
    
    # Return heatmap data
    list(
      heatmap_matrix = heatmap_matrix,
      row_dendrogram = row_dendrogram,
      clusters = clusters,
      row_colors = row_colors 
    )
  })
  
  # Render UMAP Plot
  output$cluster_plot <- renderPlotly({
    req(input$plot_type == "umap")
    
    data <- umap_data()
    validate(need(nrow(data) > 0, "No data available for clustering."))
    
    plot <- ggplot(data, aes(
      x = umap_x, y = umap_y, color = cluster, text = paste(
        "Gene Symbol:", gene_symbol,
        "<br>Group:", group_name,
        "<br>P-Value:", sprintf("%.5f", pvalue)
      )
    )) +
      geom_point(size = 2, alpha = 0.8) +
      scale_color_manual(values = scales::hue_pal()(length(unique(data$cluster)))) +
      labs(
        title = "",
        x = "",
        y = "",
        color = "Clusters"
      ) +
      theme_minimal()
    
    ggplotly(plot, tooltip = "text") %>% 
      event_register("plotly_click") 
  })
  
  # Render Heatmap
  output$heatmap_plot <- renderPlotly({
    req(input$plot_type == "heatmap")
    
    heatmap_info <- heatmap_data()
    heatmap_matrix <- heatmap_info$heatmap_matrix
    validate(need(!is.null(heatmap_matrix), "No data available for the heatmap."))
    
    num_clusters <- input$num_clusters  # Get user-defined cluster count
    
    row_clusters <- cutree(heatmap_info$row_dendrogram, k = num_clusters)
    row_clusters <- factor(row_clusters)  # Convert to factor to ensure mapping
    
    # Generate distinct colors matching the number of clusters
    cluster_colors <- setNames(
      colorRampPalette(brewer.pal(12, "Set3"))(num_clusters), 
      levels(row_clusters)
    )
    
    colors <- colorRampPalette(rev(brewer.pal(9, "RdBu")))(200)
    
    # Generate heatmap
    p <- heatmaply(
      heatmap_matrix,
      dendrogram = "both",
      xlab = "",
      ylab = "",
      colors = colors,
      plot_method = "plotly",
      k_row = input$num_clusters,  # Dynamically adjust clusters
      row_side_colors = heatmap_info$row_colorsm
    )
    
    p <- p %>% layout(
      clickmode = "event+select"
    ) %>% event_register("plotly_click")
    
    return(p)
  })
  
  output$click_info <- renderText({
    click <- event_data("plotly_click")
    if (is.null(click)) return("Click on a point to see details.")
    
    data <- umap_data()
    clicked_point <- data %>%
      mutate(distance = sqrt((umap_x - click$x)^2 + (umap_y - click$y)^2)) %>%
      filter(distance == min(distance))
    
    if (nrow(clicked_point) > 0) {
      paste(
        "Gene Symbol: ", clicked_point$gene_symbol[1],
        "\nGroup Name: ", clicked_point$group_name[1],
        "\nPhenotype: ", clicked_point$parameter_name[1],
        "\nP-Value: ", sprintf("%.7f", clicked_point$pvalue[1])
      )
    } else {
      "Click on a point to see details."
    }
  })
}

# Run the Shiny App
shinyApp(ui = gene_clustering_ui, server = gene_clustering_server)
