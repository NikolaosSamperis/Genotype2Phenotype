---
title: "Data Cleaning"
author: "Nikolaos Samperis"
format: pdf
---

Reading and Cleaning IMPC_parameter_description
```{r}
# Read raw data
raw_data = readLines("IMPC_parameter_description.txt")

# Remove the first line (contains "x") and fix the header line (add missing comma)
raw_data = raw_data[-1]
raw_data[1] = "line_number, impcParameterOrigId, name, description, parameterId"

# Preprocess to handle multiline rows
processed_data = c()
current_row = ""

for (line in raw_data) {
  # Remove surrounding double quotes and trim white spaces
  line = str_trim(gsub('\"', '', line))
  
  # Skip completely empty rows
  if (line == "") next
  
  # Check if the line starts with a number (line_number)
  if (grepl("^\\d+\\s", line)) {  # Match numeric rows
    if (current_row != "") {
      processed_data = c(processed_data, current_row)  # Save the previous row
    }
    current_row = line  # Start a new row
  } else {
    # Otherwise, append to the current row for multiline descriptions
    current_row = paste(current_row, line, sep = " ")
  }
}

# Add the last row
if (current_row != "") {
  processed_data = c(processed_data, current_row)
}

# Write processed data to a temporary file
temp_file = tempfile()
writeLines(processed_data, temp_file)

# Read the corrected file with row delimiter parsing
Prmt_description_raw = read.delim(temp_file, sep = "\n", header = FALSE, quote = "")

# Split the first column into "line_number" and "rest"
Prmt_description_split = Prmt_description_raw %>%
  mutate(V1 = gsub('\"', '', V1)) %>%  # Remove quotes
  separate(V1, into = c("line_number", "rest"),
           sep = " ", extra = "merge", fill = "right")

# Extract column "impcParameterOrigId" from "rest"
Prmt_description_split = Prmt_description_split %>%
  mutate(
    impcParameterOrigId = str_extract(rest, "^[^,]+"),  
    # Extract "impcParameterOrigId" up to the first comma
    
    rest = str_remove(rest, "^[^,]+,")  
  ) # Remove "impcParameterOrigId" and the comma from "rest"

# Extract column "name" from "rest"
Prmt_description_split = Prmt_description_split %>%
  mutate(
    name = str_extract(rest, "^[^,]+"),  # Extract "name" up to the first comma
    rest = str_remove(rest, "^[^,]+,")  # Remove "name" and the comma from 'rest'
  )
# Extract column "parameterId" from rest
Prmt_description_split = Prmt_description_split %>%
  mutate(
    parameterId = str_extract(rest, "[^,]+$"), # Extract everything after the last comma
    rest = str_replace(rest, ",\\s*[^,]+$", "") # Remove the last part from "rest"
  )

# Rename column "rest" to description
names(Prmt_description_split)[names(Prmt_description_split) == "rest"] = "description"

# Clean manually entered "NA" values and missing values by trimming white spaces
# Convert both manually entered "NA" values and missing values to NA
Prmt_description_cleaned = Prmt_description_split %>%
  mutate_all(~ifelse(is.na(.) | str_trim(.) == "" | str_trim(.) == "NA",
                     NA, str_trim(.))) 

# Convert parameterId text to lowercase for uniformity
Prmt_description_cleaned = Prmt_description_cleaned %>%
  mutate(parameterId = tolower(parameterId),
         name = tolower(name))

# Remove redundant 1st column and 1st row
Prmt_description_cleaned = Prmt_description_cleaned[-1,-1]

# Remove duplicate rows based on all columns 
Prmt_description_cleaned = Prmt_description_cleaned %>%
  distinct(impcParameterOrigId, name, description, parameterId, .keep_all = TRUE)

# Reset row numbers
rownames(Prmt_description_cleaned) = NULL

# Reorder the columns in the data frame
Prmt_description_cleaned = Prmt_description_cleaned[, c("impcParameterOrigId", "name", "description", "parameterId")]
```



Reading and Cleaning IMPC_procedure
```{r}
# Read raw data
raw_data = readLines("IMPC_procedure.txt")

# Combine multiline rows into single lines
processed_data = c()
current_row = ""

for (line in raw_data) {
  # Remove surrounding double quotes and trim white spaces
  line <- str_trim(gsub('\"', '', line))
  
  # Skip completely empty rows
  if (line == "") next
  
  # Check if the line starts with a number (line_number)
  if (grepl("^\\d+\\s", line)) {  # Match numeric rows
    if (current_row != "") {
      # Save the previous row
      processed_data = c(processed_data, current_row)  
    }
    current_row = line  # Start a new row
  } else {
    # Otherwise, append to the current row for multiline descriptions
    current_row = paste(current_row, line, sep = " ")
  }
}

# Add the last row
if (current_row != "") {
  processed_data = c(processed_data, current_row)
}

# Add a period after "abnormal respiratory function" in all rows
processed_data = gsub("abnormal respiratory function(?!\\.)", "abnormal respiratory function.", processed_data, perl = TRUE)

# Write processed data to a temporary file
temp_file = tempfile()
writeLines(processed_data, temp_file)

# Read the corrected file with row delimiter parsing
procedure_raw = read.delim(temp_file, sep = "\n", header = FALSE, quote = "")

# Split the first column into "line_number" and "rest"
procedure_split = procedure_raw %>%
  mutate(V1 = gsub('\"', '', V1)) %>%  # Remove quotes
  separate(V1, into = c("line_number", "rest"), sep = " ", extra = "merge", fill = "right")

# Extract column "name" from "rest"
procedure_split = procedure_split %>%
  mutate(
    name = str_extract(rest, "^[^,]+"),  # Extract "name" up to the first comma
    rest = str_remove(rest, "^[^,]+,")  # Remove "name" and the comma from "rest"
  ) %>%
  mutate(
    # Escape commas inside parentheses
    rest = str_replace_all(rest, "\\(([^()]*?)\\)", function(x) {
      gsub(",", "|", x)  # Replace all commas within parentheses with "|"
    }),
    
    # Escape commas up to and excluding those in ".," and skip others
    rest = str_replace_all(rest, ",(?=.*\\.\\,)", "| ") %>%  # Replace commas up to ".," pattern
      str_replace_all(",(?=.)", ",")  # Ignore commas after the ".," pattern
  )

# Split the "rest" column into additional fields
procedure_split = procedure_split %>%
  separate(rest, into = c("description", "isMandatory", "impcParameterOrigId"), 
           sep = ",", extra = "merge", fill = "right")

# Restore escaped commas in specific cases in "description" column
procedure_split = procedure_split %>%
  mutate(description = str_replace_all(description, "\\|", ","))

# Clean up missing values (replace with NA) and trim white spaces
procedure_cleaned = procedure_split %>%
  mutate_all(~ifelse(is.na(.) | str_trim(.) == "", NA, str_trim(.)))



# Clean up "description" column

# Replace "&nbsp;" with a space, "&rsquo;" with the right single quotation mark and "&amp;" with an ampersand symbol (&) 
procedure_cleaned$description = procedure_cleaned$description %>%
  gsub("&nbsp;", " ", .) %>%
  gsub("&rsquo;", "â€™", .) %>%
  gsub("&amp;", "&", .)

# Fix missing spaces after periods and replace multiple spaces with a single space 
procedure_cleaned$description = procedure_cleaned$description %>%
  gsub("\\.(?=[^\\s])", ". ", ., perl = TRUE) %>% # Ensure spaces after periods
  gsub(" {2,}", " ", .) # Replace multiple spaces with a single space

# Add periods before words starting with a capital letter after a lowercase letter or closing parenthesis
procedure_cleaned$description <- gsub("([a-z\\)])([A-Z])", "\\1. \\2", procedure_cleaned$description)



# Remove redundant 1st column and 1st row
procedure_cleaned = procedure_cleaned[-1,-1]

# Reset row numbers
rownames(procedure_cleaned) = NULL

# Reorder the columns in the data frame
procedure_cleaned = procedure_cleaned[, c("name", "description", "isMandatory", "impcParameterOrigId")]
```


Reading and Cleaning Disease_information
```{r}

# Read raw data
raw_data = readLines("Disease_information.txt")

# Remove the first line (contains "x") 
raw_data = raw_data[-1]

# Preprocess to handle multiline rows
processed_data = c()
current_row = ""

for (line in raw_data) {
  # Remove surrounding double quotes and trim white spaces
  line = str_trim(gsub('\"', '', line))
  
  # Skip completely empty rows
  if (line == "") next
  
  # Check if the line starts with a number (line_number)
  if (grepl("^\\d+\\s", line)) {  # Match numeric rows
    if (current_row != "") {
      processed_data = c(processed_data, current_row)  # Save the previous row
    }
    current_row = line  # Start a new row
  } else {
    # Otherwise, append to the current row for multiline descriptions
    current_row = paste(current_row, line, sep = " ")
  }
}

# Add the last row
if (current_row != "") {
  processed_data = c(processed_data, current_row)
}

# Write processed data to a temporary file
temp_file = tempfile()
writeLines(processed_data, temp_file)

# Read the corrected file with row delimiter parsing
Disease_info_raw = read.delim(temp_file, sep = "\n", header = FALSE, quote = "")

# Split the first column into "1" and "rest"
Disease_info_split = Disease_info_raw %>%
  mutate(V1 = gsub('\"', '', V1)) %>%  # Remove quotes
  separate(V1, into = c("1", "rest"), sep = " ", extra = "merge", fill = "right")

# Extract column "name" from "rest"
Disease_info_split = Disease_info_split %>%
  mutate(
    disease_id = str_extract(rest, "^[^,]+"),  # Extract "name" up to the first comma
    rest = str_remove(rest, "^[^,]+,")  # Remove "name" and the comma from "rest"
  ) %>%
  rowwise() %>%  # Apply row-wise transformations
  mutate(
    rest = rest %>%
      str_replace_all(",(?![^,]*MGI:)", "| ") %>%  # Replace commas before the last comma preceding "MGI:"
      gsub("(MGI:\\d+)\\|", "\\1,", .)  # Retain comma after the "MGI:" pattern by transforming "|" back to ","
  ) %>%
  ungroup()  # Remove row-wise grouping

# Split the `rest` column into additional fields
Disease_info_split = Disease_info_split %>%
  separate(rest, into = c("disease_term", "gene_accession_id", "phenodigm_score"), 
           sep = ",", extra = "merge", fill = "right")

# Restore escaped commas in specific cases in "description" column
Disease_info_split = Disease_info_split %>%
  mutate(disease_term = str_replace_all(disease_term, "\\|", ","))

# Clean up missing values (replace with NA) and trim white spaces
Disease_info_cleaned = Disease_info_split %>%
  mutate_all(~ifelse(is.na(.) | str_trim(.) == "", NA, str_trim(.)))

# Fix missing spaces after periods and replace multiple spaces with a single space
Disease_info_cleaned$disease_term = Disease_info_cleaned$disease_term %>%
  gsub("\\.(?=[^\\s])", ". ", ., perl = TRUE) %>% # Ensure spaces after periods
  gsub(" {2,}", " ", .) # Replace multiple spaces with a single space

# Fix "gene_accession_id" values to lower case for consistency
Disease_info_cleaned = Disease_info_cleaned %>%
  mutate(gene_accession_id = tolower(gene_accession_id))

# Remove redundant 1st column and 1st row
Disease_info_cleaned = Disease_info_cleaned[-1,-1]

# Reset row numbers
rownames(Disease_info_cleaned) = NULL

# Reorder the columns in the data frame
Disease_info_cleaned = Disease_info_cleaned[, c("disease_id", "disease_term", "gene_accession_id", "phenodigm_score")]

# Transform "phenodigm_score" values to numeric
Disease_info_cleaned$phenodigm_score = as.numeric(Disease_info_cleaned$phenodigm_score)

# Filter to retain only rows with the highest "phenodigm_score" for duplicate "gene_accession_id" values.
Disease_info_cleaned = Disease_info_cleaned %>%
  group_by(gene_accession_id) %>%
  slice_max(phenodigm_score, with_ties = FALSE)
```

